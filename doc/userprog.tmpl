             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Lihan     Yang     ly1423@ic.ac.uk
Daniel    Li       dl1723@ic.ac.uk
Henry     Wu       hw2823@ic.ac.uk
Andy      Wang     aw2623@ic.ac.uk

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while preparing your 
>> submission, other than the PintOS documentation, course text, lecture notes 
>> and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or `struct' member, 
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.

Declarations in "thread.h":

    struct thread
    {
    ...
    #ifdef USERPROG
        /* Owned by userprog/process.c. */
        uint32_t *pagedir;                  /* Page directory. */
        void *process;                      /* For passing data to parent. */
        struct list children;               /* Child threads. */
        int next_fd;                        /* Next file descriptor. */
        struct list files;                  /* List of opened files. */
        struct file *exec_file;             /* Executable file running on this process. */
    ...
    };

Declarations in "process.c":

    /* Child process for parent thread's CHILDREN. This must be on
    the parent's page, because otherwise it will be lost when the
    child thread terminates. STATUS should be -1 at first and
    updated in a call to exit(). */
    struct child_proc
    {
        struct list_elem elem;      /* For the list CHILDREN in a thread. */
        tid_t tid;                  /* Effectively PID. */
        struct semaphore semaphore; /* Semaphore for process_wait(). */
        int status;                 /* Exit status, default to -1. */
        void **ref;                 /* Reference to the process pointer in thread. */
    };

    /* Argument package for start_process(). */
    struct child_proc_loader
    {
        char *fn;                   /* Name of the process. */ 
        struct semaphore semaphore; /* Semaphore or process_execute(). */
        struct child_proc *proc;    /* The child process. */
        bool success;               /* Whether the process is successfully loaded. */
    };

---- ALGORITHMS ----

>> A2: (2 marks)
>> How does your argument parsing code avoid overflowing the user's stack page?
>> What are the efficiency considerations of your approach?

The funciton set_user_stack () is used to push the arguments to the user stack.
It would check if the stack exceeds page limit after pushing. The function
returns failure otherwise. 

!!!!!!!!Needs to answer efficiency considerations!!!!!!!!!!

---- RATIONALE ----

>> A3: (2 marks)
>> PintOS does not implement strtok() because it is not thread safe. 
>> Explain the problem with strtok() and how strtok_r() avoids this issue.

strtok() uses global data, so it is unsafe in threaded programs such as kernels.
It may inherit values from a different thread in concurrent conditions.

strtok_r() is a reentrant version of strtok(). The saveptr argument is a pointer 
to string variable that is used internally by strtok_r() to maintian context between 
sucessive calls that parse the same string. On the first call, str is point to the 
string to be parsed, and the value of saveptr is ignored. In subsequent calls, str 
should be NULL, and saveptr should be unchanged since the previous call.

Hence different strings can be parsed concurrently using sequnces of calls to 
strtok_r() that specify different saveptr arguments.

>> A4: (3 marks)
>> In PintOS, the kernel separates commands into an executable name and arguments. 
>> In Unix-like systems, the shell does this separation. 
>> Identify three advantages of the Unix approach.

Ans: 
- Unix systems allow for greater fliexiblity and modularity. Since the shell supports
multiple commands on one line and pass outputs btween commands, users can create complex
commnd pipelines by chaining simple commands together using shell features, such as 
pipes and redirection.
- In addition, the Unix systems are more user-customisable as the shell allows users to 
cusetomise their command-line experience. For example, users can create aliases, functions
and scripts to automate repetitive tasks and tailor the shell to specific needs. Hence,
increasing efficiency.
- Finally, separating the argument passing procedure makes the Unix systems more organised. 
In particular, the kernel ocuses onn low-level operations and resource management, while the
shell handles user interactions and command parsing. This separation simplifies the design
and implementation of the system and thus, making it eaiser to maintain.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (6 marks) 
>> Copy here the declaration of each new or changed `struct' or `struct' member, 
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.

Declaration in "syscall.c":

    struct list open_files;          /* List of all opened files. */
    static struct lock filesys_lock; /* Lock for the file system. */

    /* A file opened by a user program. */
    struct user_file
    {
        int fd;
        struct file *file;
        struct list_elem elem;
    };

---- ALGORITHMS ----

>> B2: (2 marks)
>> Describe how your code ensures safe memory access of user provided data from
>> within the kernel. 

We use the function is_mem_valid () to check if a given pointer is valid in the
kernal. The function ensures that the pointer is not null and whether it is 
properly defined on the virtual and physical address for every page included.

The is_str_mem_valid () function serves a similar purpose except it assumes the
address of the pointer is a char.

>> B3: (3 marks)
>> Suppose that we choose to verify user provided pointers by validating them 
>> before use (i.e. using the first method described in the spec).
>> What is the least and the greatest possible number of inspections of the page
>> table (e.g. calls to pagedir_get_page()) that would need to be made in the 
>> following cases?
>> a) A system call that passes the kernel a pointer to 10 bytes of user data.
>> b) A system call that passes the kernel a pointer to a full page 
>>    (4,096 bytes) of user data.
>> c) A system call that passes the kernel a pointer to 4 full pages 
>>    (16,384 bytes) of user data.
>> You must briefly explain the checking tactic you would use and how it applies 
>> to each case to generate your answers.

The least possible number of inspections of the page for a), b), and c) are 
respectively 1, 1, and 4. The greatest possible numbers are 2, 2, and 5.

The checking tactic we applied is simply to keep checking the next page of the 
page table until all user data is traversed. It guarentees all user data is valid.

For case a), the algorithm checks the head and end of the user data. If they are
located at 2 different pages, 2 inspections to the page table would be made. Only
1 inspection is needed if all 10 bytes are in the same page.

For case b), the algorithm functions exactly the same.

For case c), the algorithm checks the head and each page until the end of user data.
If the user data are fit perfectly in 4 pages, we only need 4 inspection to the page
table. 5 inspections otherwise.

>> B4: (2 marks)
>> When an error is detected during a system call handler, how do you ensure 
>> that all temporarily allocated resources (locks, buffers, etc.) are freed?

Whenever an error is detected, erroneous_exit is called, which called syscall exit 
with exit status -1. In syscall_exit, all opened files would be closed, and the 
corresponding struct user_file are freed. In process_exit, all children of the current 
thread (struct child_proc) are freed. 

>> B5: (8 marks)
>> Describe your implementation of the "wait" system call and how it interacts 
>> with process termination for both the parent and child.

---- SYNCHRONIZATION ----

>> B6: (2 marks)
>> The "exec" system call returns -1 if loading the new executable fails, so it 
>> cannot return before the new executable has completed loading. 
>> How does your code ensure this? 
>> How is the load success/failure status passed back to the thread that calls 
>> "exec"?

A semaphore is used to ensure that loading always finishes before return; In 
process_execute, a struct loader is initialized which include a semaphore 
initialized to 0. A reference to the loader would be passed into start_process 
as argument. After the thread is created, sema_down is called, so that the loader 
would stay on the stack. In start_process, the result of loading would be passed 
to a boolean variable of the loader, and then sema_up() is called. Thus, 
process_execute could always retrieve the result of loading. -1 is returned to 
"exec" if the loading failed.

>> B7: (5 marks)
>> Consider parent process P with child process C. 
>> How do you ensure proper synchronization and avoid race conditions when: 
>>   i) P calls wait(C) before C exits?
>>  ii) P calls wait(C) after C exits?
>> iii) P terminates, without waiting, before C exits?
>>  iv) P terminates, without waiting, after C exits?
>> Additionally, how do you ensure that all resources are freed regardless of 
>> the above case? 

---- RATIONALE ----

>> B8: (2 marks)
>> Why did you choose to implement safe access of user memory from the kernel in 
>> the way that you did?

We adopts the first method introduced in the spec under "4.1.5 Accessing User Memory"
by verifying the validity of the user provided pointer and deferencing it. 
Though it might not be as efficient as deferencing first and then handling the 
error, it is a very simply and direct way to handle user memory access 

>> B9: (2 marks)
>> What advantages and disadvantages can you see to your design for file 
>> descriptors?

In our implementation, each thread has its own set of file descriptors and a list of 
opened files. 

Synchronization: This approach avoids using a global structure, and each list of files 
can only be accessed and modified by the thread holding the list. Thus, there is no race 
condition and no extra synchronization is required, which would be more efficient. 

!!!!!!NEED DISADVANTAGES!!!!!!!